---
- name: Create specified users
  user:
    name: "{{ item }}"
    shell: /bin/bash
    password: "{{ PASSWORD }}"
  loop: "{{ USERS }}"

- name: Configure admin users
  block:
    - name: Create admin group
      group:
        name: admin
        state: present
    - name: Add specified admin users to admin group
      user:
        name: "{{ item }}"
        group: admin
      loop: "{{ ADMIN_USERS }}"
    - name: Add sudoer rule for local user
      copy:
        dest: /etc/sudoers.d/admin
        src: files/admin
        owner: root
        group: root
        mode: 0440
        validate: /usr/sbin/visudo -csf %s

- name: Install latest packages update/upgrade, and install dependencies
  block:
    - name: Update repos
      apt:
        update_cache: yes
        force_apt_get: yes
    - name: Upgrade packages
      apt:
        upgrade: dist
    - name: Install git and acl packages
      apt:
        name: 
          - git
          - acl
        state: present
    - name: Remove useless packages from the cache
      apt:
        autoclean: yes
    - name: Remove dependencies that are no longer required
      apt:
        autoremove: yes

- name: Install and configure zsh shell
  block:
    - name: Install zsh
      apt:
        name: zsh
        state: present
    - name: Make ohmyzsh git directory safe
      command: git config --global --add safe.directory /home/{{ item }}/.oh-my-zsh
      check_mode: no
      loop: "{{ USERS }}"
    - name: Clone ohmyzsh repo
      git:
        repo: "https://github.com/ohmyzsh/ohmyzsh.git"
        dest: /home/{{ item }}/.oh-my-zsh
      loop: "{{ USERS }}"
    - name: Copy zsh config
      copy:
        src: files/.zshrc
        dest: /home/{{ item }}
      loop: "{{ USERS }}"
    - name: Change default shell
      user:
        name: "{{ item }}"
        shell: /bin/zsh
      loop: "{{ USERS }}"


- name: Install and configure tmux
  block:
    - name: Install tmux
      apt:
        name: tmux
        state: present
    - name: Make tmux git directory safe
      command: git config --global --add safe.directory /home/{{ item }}/.tmux
      check_mode: no
      loop: "{{ USERS }}"
    - name: Download pretty tmux from git
      git:
        repo: "https://github.com/gpakosz/.tmux.git"
        dest: /home/{{ item }}/.tmux
      loop: "{{ USERS }}"
    - name: Create tmux config symlink
      command: ln -s -f .tmux/.tmux.conf
      args:
        chdir: /home/{{ item }}
      loop: "{{ USERS }}"
    - name: Copy local tmux config to home dir
      command: cp .tmux/.tmux.conf.local .
      args:
        chdir: /home/{{ item }}
      loop: "{{ USERS }}"

- name: Install and configure vim
  block:
    - name: Install vim
      apt:
        name: vim
        state: present
    - name: Make vim git directory safe
      command: git config --global --add safe.directory /home/{{ item }}/.vim_runtime
      check_mode: no
      loop: "{{ USERS }}"
    - name: Download awesome vim from git
      git:
        repo: https://github.com/amix/vimrc.git
        depth: 1
        dest: /home/{{item}}/.vim_runtime
      loop: "{{ USERS }}"
    - name: Fix permissions
      file:
        path: /home/{{ item }}
        recurse: true
        owner: "{{ item }}"
        group: "{{ item }}"
      loop: "{{ USERS }}"
    - name: Execute awesome vim install
      command: sh /home/{{ item }}/.vim_runtime/install_awesome_vimrc.sh
      become_user: "{{ item }}"
      loop: "{{ USERS }}"

- name: Configure Megacorp terminal logo
  block:
    - name: Install neofetch
      apt:
        name: neofetch
        state: present
    - name: Ensure .config file exists
      file:
        path: /home/{{ item }}/.config/neofetch
        state: directory
      loop: "{{ USERS }}"
    - name: Copy neofetch config
      copy:
        src: files/config.conf
        dest: /home/{{ item }}/.config/neofetch/
      loop: "{{ USERS }}"
    - name: Copy megacorplogo
      copy:
        src: files/megacorplogo
        dest: /home/{{ item }}/.config/neofetch/
      loop: "{{ USERS }}"

- name: Fix permissions (again)
  file:
    path: /home/{{ item }}
    recurse: true
    owner: "{{ item }}"
    group: "{{ item }}"
  loop: "{{ USERS }}"
